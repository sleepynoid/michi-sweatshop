// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String   @unique
  password  String
  name      String
  role      String   @default("user")
  token     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // items     Item[]
}

model Product {
  uuid          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String
  product_type  String
  vendor        String
  tags          Json
  status        String
  published_at  DateTime?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  images        Image[]
  variants      Variant[]
}

model Variant {
  uuid                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String
  price               Int
  sku                 String         @unique
  inventory_quantity  Int
  inventory_policy    String
  option1             String
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  productId           String         @db.Uuid
  product             Product        @relation(fields: [productId], references: [uuid], onDelete: Cascade)
  inventory_item      InventoryItem?
  images              Image[]
}

model InventoryItem {
  uuid        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sku         String
  tracked     Boolean
  available   Int
  cost        Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  variantId   String   @unique @db.Uuid
  variant     Variant  @relation(fields: [variantId], references: [uuid], onDelete: Cascade)
}

model Image {
  uuid        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url         String
  alt_text    String?
  position    Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  productId   String?  @db.Uuid
  variantId   String?  @db.Uuid
  // File metadata
  filename    String?
  size        Int?
  mime_type   String?
  width       Int?
  height      Int?
  product     Product? @relation(fields: [productId], references: [uuid], onDelete: Cascade)
  variant     Variant? @relation(fields: [variantId], references: [uuid], onDelete: Cascade)

  @@unique([productId, position])
  @@unique([variantId, position])
}
